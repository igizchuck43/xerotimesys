class Node:
  def __init__(self, data):
    self.data = data
    self.next = None

class LinkedList:
  def __init__(self):
    self.head = None

  def insert_at_beginning(self, data):
    new_node = Node(data)
    new_node.next = self.head
    self.head = new_node

  def insert_at_end(self, data):
    new_node = Node(data)
    if self.head is None:
      self.head = new_node
    else:
      current_node = self.head
      while current_node.next is not None:
        current_node = current_node.next
      current_node.next = new_node

  def insert_at_position(self, data, position):
    new_node = Node(data)
    current_node = self.head
    index = 0
    while index < position - 1:
      if current_node.next is None:
        print("Position is out of range")
        return
      current_node = current_node.next
      index += 1
    next_node = current_node.next
    current_node.next = new_node
    new_node.next = next_node

  def search(self, data):
    current_node = self.head
    while current_node is not None:
      if current_node.data == data:
        return current_node
      current_node = current_node.next
    return None

  def delete(self, data):
    current_node = self.head
    previous_node = None
    while current_node is not None:
      if current_node.data == data:
        if previous_node is None:
          self.head = current_node.next
        else:
          previous_node.next = current_node.next
        return
      previous_node = current_node
      current_node = current_node.next

def main():
  linked_list = LinkedList()
  linked_list.insert_at_beginning(1)
  linked_list.insert_at_beginning(2)
  linked_list.insert_at_end(3)
  linked_list.insert_at_position(4, 2)
  print(linked_list.search(2).data)
  linked_list.delete(2)
  print(linked_list.head.data)

if __name__ == "__main__":
  main()
